@model TreasureCache.Presentation.ViewModels.Home.ProductCardsViewModel
@{
    var pageSize = Model.Products.PageSize;
    var page = Model.Products.Page;
    var totalCount = Model.Products.TotalCount;
}

<div id="cards-parent-container">
    <div class="grid gap-8 grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 w-full text-gray-50">
        @foreach (var product in Model.Products.Items)
        {
             
            <div class="flex flex-col w-[300px] bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700">
                <a asp-controller="Products" asp-action="View" asp-route-id="@product.Id" class="flex flex-col grow">
                    <img class="rounded-t-lg w-[100%] h-[250px] mx-auto" src="/@product.ProductFiles.SmallImagePath" alt="product image"/>
                    <div class="grow mt-4 px-5 pb-5 flex flex-col justify-between">
                        <h5 class="text-xl font-semibold tracking-tight text-gray-900 dark:text-white">@product.Name</h5>
                        <p class="text-sm font-semibold tracking-tight text-gray-900 dark:text-white overflow-hidden overflow-ellipsis whitespace-nowrap">
                            @product.Description
                        </p>
                        <div class="grow"> </div>
                        <div class="mt-4 flex flex-col">
                            @if (product.Discount > 0)
                            {
                                <span class="text-sm block line-through">@product.BasePrice</span>
                                <span class="text-2xl block font-semibold">@Math.Round(product.BasePrice * ((1 - ((decimal)product.Discount / 100))), 2)</span>
                            }
                            else
                            {
                                <span class="text-2xl block font-semibold ">@product.BasePrice</span>
                            }
                        </div>
                    </div>
                    </a>
             </div>
        }
    </div>
    <div class="flex flex-col items-center mt-8">
        <!-- Help text -->
        <span class="text-sm text-gray-700 dark:text-gray-400">
            Showing <span class="font-semibold text-gray-900 dark:text-white">@((page * pageSize - 11).ToString())</span> to <span class="font-semibold text-gray-900 dark:text-white">@(System.Math.Min((page * pageSize), totalCount).ToString())</span> of <span class="font-semibold text-gray-900 dark:text-white">@(totalCount.ToString())</span> Entries
        </span>
        <!-- Buttons -->
        <div class="inline-flex mt-2 xs:mt-0">
            @if (Model.Products.HasPreviousPage)
            {
                <button hx-get="/" hx-swap="outerHTML" hx-target="#cards-parent-container" hx-vals='{"page" : "@((page - 1).ToString())", "pageSize" : "@(pageSize.ToString())"}' class="flex items-center justify-center px-4 h-10 text-base font-medium text-white bg-gray-800 rounded hover:bg-gray-900 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                    Prev
                </button>
            }
            @if (Model.Products.HasNextPage)
            {
                <button hx-get="/" hx-swap="outerHTML" hx-target="#cards-parent-container" hx-vals='{"page" : "@((page + 1).ToString())", "pageSize" : "@(pageSize.ToString())"}' class="flex items-center justify-center px-4 h-10 text-base font-medium text-white bg-gray-800 border-0 border-s border-gray-700 rounded hover:bg-gray-900 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white">
                    Next
                </button>
            }
        </div>
    </div>
</div>